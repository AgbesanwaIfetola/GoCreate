{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/regenerator","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/inherits","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/wrapNativeSuper","data":{"isAsync":false}},{"name":"@unimodules/core","data":{"isAsync":false}},{"name":"./ExpoCrypto","data":{"isAsync":false}},{"name":"./Crypto.types","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var _exportNames = {\n    digestStringAsync: true\n  };\n  exports.digestStringAsync = digestStringAsync;\n\n  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/regenerator\"));\n\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/classCallCheck\"));\n\n  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/inherits\"));\n\n  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/possibleConstructorReturn\"));\n\n  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/getPrototypeOf\"));\n\n  var _wrapNativeSuper2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"@babel/runtime/helpers/wrapNativeSuper\"));\n\n  var _core = _$$_REQUIRE(_dependencyMap[7], \"@unimodules/core\");\n\n  var _ExpoCrypto = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8], \"./ExpoCrypto\"));\n\n  var _Crypto = _$$_REQUIRE(_dependencyMap[9], \"./Crypto.types\");\n\n  Object.keys(_Crypto).forEach(function (key) {\n    if (key === \"default\" || key === \"__esModule\") return;\n    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n    Object.defineProperty(exports, key, {\n      enumerable: true,\n      get: function get() {\n        return _Crypto[key];\n      }\n    });\n  });\n\n  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\n  function _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n  var CryptoError = function (_TypeError) {\n    (0, _inherits2.default)(CryptoError, _TypeError);\n\n    var _super = _createSuper(CryptoError);\n\n    function CryptoError(message) {\n      var _this;\n\n      (0, _classCallCheck2.default)(this, CryptoError);\n      _this = _super.call(this, \"expo-crypto: \" + message);\n      _this.code = 'ERR_CRYPTO';\n      return _this;\n    }\n\n    return CryptoError;\n  }((0, _wrapNativeSuper2.default)(TypeError));\n\n  function assertAlgorithm(algorithm) {\n    if (!Object.values(_Crypto.CryptoDigestAlgorithm).includes(algorithm)) {\n      throw new CryptoError(\"Invalid algorithm provided. Expected one of: CryptoDigestAlgorithm.\" + Object.keys(_Crypto.CryptoDigestAlgorithm).join(', AlgCryptoDigestAlgorithmorithm.'));\n    }\n  }\n\n  function assertData(data) {\n    if (typeof data !== 'string') {\n      throw new CryptoError(\"Invalid data provided. Expected a string.\");\n    }\n  }\n\n  function assertEncoding(encoding) {\n    if (!Object.values(_Crypto.CryptoEncoding).includes(encoding)) {\n      throw new CryptoError(\"Invalid encoding provided. Expected one of: CryptoEncoding.\" + Object.keys(_Crypto.CryptoEncoding).join(', CryptoEncoding.'));\n    }\n  }\n\n  function digestStringAsync(algorithm, data) {\n    var options,\n        _args = arguments;\n    return _regenerator.default.async(function digestStringAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {\n              encoding: _Crypto.CryptoEncoding.HEX\n            };\n\n            if (_ExpoCrypto.default.digestStringAsync) {\n              _context.next = 3;\n              break;\n            }\n\n            throw new _core.UnavailabilityError('expo-crypto', 'digestStringAsync');\n\n          case 3:\n            assertAlgorithm(algorithm);\n            assertData(data);\n            assertEncoding(options.encoding);\n            _context.next = 8;\n            return _regenerator.default.awrap(_ExpoCrypto.default.digestStringAsync(algorithm, data, options));\n\n          case 8:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n});","lineCount":115,"map":[[24,0,1,0],[26,0,2,0],[28,0,3,0],[30,0,4,0],[31,0,4,0],[32,0,4,0],[33,0,4,0],[34,0,4,0],[35,0,4,0],[36,0,4,0],[37,0,4,0],[38,0,4,0],[39,0,4,0],[45,6,5,6,"CryptoError"],[45,17],[50,0,6,4],[50,25,6,16,"message"],[50,32,6,4],[50,34,6,25],[51,0,6,25],[53,0,6,25],[54,0,7,8],[54,50,7,30,"message"],[54,57,7,8],[55,0,8,8],[55,12,8,13,"code"],[55,16,8,8],[55,19,8,20],[55,31,8,8],[56,0,6,25],[57,0,9,5],[60,35,5,26,"TypeError"],[60,44],[62,0,11,0],[62,11,11,9,"assertAlgorithm"],[62,26,11,0],[62,27,11,25,"algorithm"],[62,36,11,0],[62,38,11,36],[63,0,12,4],[63,8,12,8],[63,9,12,9,"Object"],[63,15,12,15],[63,16,12,16,"values"],[63,22,12,9],[63,23,12,23,"CryptoDigestAlgorithm"],[63,52,12,9],[63,54,12,46,"includes"],[63,62,12,9],[63,63,12,55,"algorithm"],[63,72,12,9],[63,73,12,4],[63,75,12,67],[64,0,13,8],[64,12,13,14],[64,16,13,18,"CryptoError"],[64,27,13,14],[64,100,13,100,"Object"],[64,106,13,106],[64,107,13,107,"keys"],[64,111,13,100],[64,112,13,112,"CryptoDigestAlgorithm"],[64,141,13,100],[64,143,13,135,"join"],[64,147,13,100],[64,148,13,140],[64,183,13,100],[64,184,13,14],[64,185,13,8],[65,0,14,5],[66,0,15,1],[68,0,16,0],[68,11,16,9,"assertData"],[68,21,16,0],[68,22,16,20,"data"],[68,26,16,0],[68,28,16,26],[69,0,17,4],[69,8,17,8],[69,15,17,15,"data"],[69,19,17,8],[69,24,17,24],[69,32,17,4],[69,34,17,34],[70,0,18,8],[70,12,18,14],[70,16,18,18,"CryptoError"],[70,27,18,14],[70,72,18,8],[71,0,19,5],[72,0,20,1],[74,0,21,0],[74,11,21,9,"assertEncoding"],[74,25,21,0],[74,26,21,24,"encoding"],[74,34,21,0],[74,36,21,34],[75,0,22,4],[75,8,22,8],[75,9,22,9,"Object"],[75,15,22,15],[75,16,22,16,"values"],[75,22,22,9],[75,23,22,23,"CryptoEncoding"],[75,45,22,9],[75,47,22,39,"includes"],[75,55,22,9],[75,56,22,48,"encoding"],[75,64,22,9],[75,65,22,4],[75,67,22,59],[76,0,23,8],[76,12,23,14],[76,16,23,18,"CryptoError"],[76,27,23,14],[76,92,23,92,"Object"],[76,98,23,98],[76,99,23,99,"keys"],[76,103,23,92],[76,104,23,104,"CryptoEncoding"],[76,126,23,92],[76,128,23,120,"join"],[76,132,23,92],[76,133,23,125],[76,152,23,92],[76,153,23,14],[76,154,23,8],[77,0,24,5],[78,0,25,1],[80,0,26,7],[80,11,26,22,"digestStringAsync"],[80,28,26,7],[80,29,26,40,"algorithm"],[80,38,26,7],[80,40,26,51,"data"],[80,44,26,7],[81,0,26,7],[82,0,26,7],[83,0,26,7],[84,0,26,7],[85,0,26,7],[86,0,26,7],[87,0,26,57,"options"],[87,12,26,57,"options"],[87,19,26,7],[87,78,26,67],[88,0,26,69,"encoding"],[88,14,26,69,"encoding"],[88,22,26,77],[88,24,26,79,"CryptoEncoding"],[88,47,26,94,"HEX"],[89,0,26,67],[89,13,26,7],[91,0,26,7],[91,16,27,9,"ExpoCrypto"],[91,36,27,20,"digestStringAsync"],[91,53,26,7],[92,0,26,7],[93,0,26,7],[94,0,26,7],[96,0,26,7],[96,18,28,14],[96,22,28,18,"UnavailabilityError"],[96,47,28,14],[96,48,28,38],[96,61,28,14],[96,63,28,53],[96,82,28,14],[96,83,26,7],[98,0,26,7],[99,0,30,4,"assertAlgorithm"],[99,12,30,4,"assertAlgorithm"],[99,27,30,19],[99,28,30,20,"algorithm"],[99,37,30,19],[99,38,30,4],[100,0,31,4,"assertData"],[100,12,31,4,"assertData"],[100,22,31,14],[100,23,31,15,"data"],[100,27,31,14],[100,28,31,4],[101,0,32,4,"assertEncoding"],[101,12,32,4,"assertEncoding"],[101,26,32,18],[101,27,32,19,"options"],[101,34,32,26],[101,35,32,27,"encoding"],[101,43,32,18],[101,44,32,4],[102,0,26,7],[103,0,26,7],[103,46,33,17,"ExpoCrypto"],[103,66,33,28,"digestStringAsync"],[103,83,33,17],[103,84,33,46,"algorithm"],[103,93,33,17],[103,95,33,57,"data"],[103,99,33,17],[103,101,33,63,"options"],[103,108,33,17],[103,109,26,7],[105,0,26,7],[106,0,26,7],[108,0,26,7],[109,0,26,7],[110,0,26,7],[111,0,26,7],[112,0,26,7],[113,0,26,7],[114,0,26,7]],"functionMap":{"names":["<global>","CryptoError","CryptoError#constructor","assertAlgorithm","assertData","assertEncoding","digestStringAsync"],"mappings":"AAA;ACI;ICC;KDG;CDC;AGC;CHI;AIC;CJI;AKC;CLI;OMC;CNQ"}},"type":"js/module"}]}